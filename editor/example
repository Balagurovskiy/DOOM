sectors* init_map(int num_sectors)
{
   sectors* sector;
   sectors* sect;

   sector = malloc(num_sectors * sizeof(*sector));

   sect = &sector[0];
   sect->npoints = 4;
   sect->floor = 0;
   sect->ceil = 13;
   int sector0x[] =    {0.0,    0.0,    6.0,    5.0,    0.0};
   int sector0y[] =    {15.0,   0.0,    5.0,    10.0,   15.0};
   int neighbors0[] =  {-1,     1,      3,      4,     0};
   sector_init(sect, sector0x, sector0y, neighbors0);

   sect = &sector[1];
   sect->npoints = 5;
   sect->floor = 9;
   sect->ceil = 29;
   int sector2x[] =    {0.0,    15.0,    15.0,    10.0,    6.0,   0.0};
   int sector2y[] =    {0.0,    0.0,     5.0,     5.0,     5.0,   0.0};
   int neighbors2[] =  {-1,     -1,      2,       3,      0,     0};
   sector_init(sect, sector2x, sector2y, neighbors2);

   sect = &sector[2];
   sect->npoints = 6;
   sect->floor = 6;
   sect->ceil = 26;
   int sector1x[] =    {5.0,    5.0,    10.0,   15.0,    15.0,    10.0,    5.0};
   int sector1y[] =    {10.0,   10.0,   5.0,    5.0,     15.0,    10.0,    10.0};
   int neighbors1[] =  {3,      3,      1,     -1,       4,       4,       0};
   sector_init(sect, sector1x, sector1y, neighbors1);

   sect = &sector[3];
   sect->npoints = 3;
   sect->floor = 13;
   sect->ceil = 18;
   int sector3x[] =    {6.0,    10.0,    5.0,    6.0};
   int sector3y[] =    {5.0,    5.0,     10.0,   5.0};
   int neighbors3[] =  {1,      2,       0,      0};
   sector_init(sect, sector3x, sector3y, neighbors3);

   sect = &sector[4];
   sect->npoints = 4;
   sect->floor = 3;
   sect->ceil = 23;
   int sector4x[] =    {0.0,   5.0,     10.0,    15.0,   0.0};
   int sector4y[] =    {15.0,  10.0,    10.0,    15.0,   15.0};
   int neighbors4[] =  {0,     2,       2,       -1,     0};
   sector_init(sect, sector4x, sector4y, neighbors4);

   return (sector);
}


void print_shape(t_shape *shape, char *id)
{
	int i;
	int     count;

	i = 0;
	count = shape->point_count - 1;
	while (i < count)
	{
		printf("shape #%s point #%i [%i, %i] \n", id, i, shape->points[i].x, shape->points[i].y);
		i++;
	}
	printf("shape [%i, %i, %i, %i] \n", shape->x_min, shape->x_max, shape->y_min, shape->y_max);
}

void print_point(t_point point)
{
	printf("POINT [%i, %i] \n", point.x, point.y);
}
